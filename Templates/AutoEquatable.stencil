// MARK: - AutoEquatable
{% for type in extensions.AutoEquatable %}
extension {{ type.name }}: Equatable {}
{{ type.accessibility }} func ==(lhs: {{ type.name }}, rhs: {{ type.name }}) -> Bool {
  {% if type.isEnum %}
  {% for enumCase in type.enumCases %}
  {% if forloop.first %}
  switch (lhs, rhs) {
  {% endif %}
  case let (.{{ enumCase.name }}{% for associatedValue in enumCase.associatedValues %}{% if forloop.first %}({% endif %}lhsValue{{ forloop.counter }}{% if forloop.last %}){% endif %}{% endfor %}, .{{ enumCase.name }}{% for associatedValue in enumCase.associatedValues %}{% if forloop.first %}({% endif %}rhsValue{{ forloop.counter }}{% if forloop.last %}){% endif %}{% endfor %}){% if enumCase.associatedValues %} where {% for associatedValue in enumCase.associatedValues %}lhsValue{{ forloop.counter }} == rhsValue{{ forloop.counter }} && {% endfor %}true {% endif %}:
    return true
  {% if forloop.last %}
     default: return false
  }
  {% endif %}
  {% endfor %}

  {% else %}
  {% for field in type.fields %}
  {% if forloop.first %}
  return
  {% endif %} lhs.{{ field.name }} == rhs.{{ field.name }}
    && {% if forloop.last %} true{% endif %}
  {% endfor %}
  {% endif %}

}
{% endfor %}
// MARK: -
