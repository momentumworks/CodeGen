// MARK: - AutoEquatable
{% for type in extensions.AutoEquatable %}
extension {{ type.name }}: Equatable {}
{{ type.accessibility }} func ==(lhs: {{ type.name }}, rhs: {{ type.name }}) -> Bool {

  {% if type.enumCases %}
  switch (lhs, rhs) {
  {% for enumCase in type.enumCases %}case let (.{{ enumCase.name }}{% for associatedValue in enumCase.associatedValues %}{{ if forloop.first }}({{ endif }}lhsValue{{ forloop.counter }}{{ if forloop.last }}){{ endif }}{% endfor %}, .{{ enumCase.name }}{% for associatedValue in enumCase.associatedValues %}{{ if forloop.first }}({{ endif }}rhsValue{{ forloop.counter }}{{ if forloop.last }}){{ endif }}{% endfor %}):
    return true
  {% endfor %}
  default: return false
  }

  {% else %}
  return {% for field in type.fields %}lhs.{{ field.name }} == rhs.{{ field.name }}
    && {% endfor %}true
  {% endif %}
}
{% endfor %}
// MARK: -
