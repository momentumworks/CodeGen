// MARK: - JSONEncodable

extension ASemiComplexEnum: JSONEncodable {

  private var typeString: String {
    switch self {
      case .Dell:  return "dell"
      case .Bell:  return "bell"
      case .Silicon:  return "silicon"
    }
  }

  static func fromJSON(optionalJSON: JSON?) -> ASemiComplexEnum? {
    guard let json = optionalJSON,
      type = json["type"].string
    else {
      return logErrorAndReturnNil(optionalJSON)
    }

    switch (type) {
    case "dell":
      guard let name = json["name"].string else {
        return logErrorAndReturnNil(optionalJSON)
      }
      return .Dell(name)
    case "bell":
      guard let number = NumberType.fromJSON(json["number"]) else {
        return logErrorAndReturnNil(optionalJSON)
      }
      return .Bell(number)
    case "silicon":
      guard let anotherNumber = json["anotherNumber"].int else {
        return logErrorAndReturnNil(optionalJSON)
      }
      return .Silicon(anotherNumber)
    default:
      return logErrorAndReturnNil(optionalJSON)
    }

  }

  func toJSON() -> JSON {
    var json = JSON([:])
    json["type"] = JSON(self.typeString)
    switch self {
    case .Dell(let name):
      json["name"] = JSON(name)
    case .Bell(let number):
      json["number"] = number.toJSON()
    case .Silicon(let anotherNumber):
      json["anotherNumber"] = JSON(anotherNumber)
    }
    return json
  }

}



extension NumberType: JSONEncodable {

  static func fromJSON(optionalJSON: JSON?) -> NumberType? {
    return optionalJSON?.string.flatMap { NumberType(rawValue: $0.lowercaseString) }
  }

  func toJSON() -> JSON {
    return JSON(self.rawValue.lowercaseString)
  }

}


