// MARK: - AutoEquatable

{% for type in extensions.AutoEquatable %}
extension {{ type.name }}: Equatable {}
{{ type.accessibility }} func ==(lhs: {{ type.name }}, rhs: {{ type.name }}) -> Bool {
  {% if type.enumCases %}switch (lhs, rhs) { {% for enumCase in type.enumCases %}
  case (.{{ enumCase.name }}{% if enumCase.associatedValues %}({% for associatedValue in enumCase.associatedValues %}let lhsValue{{ forloop.counter }}{% comma %}{% endfor %}){% endif %}, .{{ enumCase.name }}{% if enumCase.associatedValues %}({% for associatedValue in enumCase.associatedValues %}let rhsValue{{ forloop.counter }} {% comma %}{% endfor %}){% endif %}){% if enumCase.associatedValues %} where {% for associatedValue in enumCase.associatedValues %}lhsValue{{ forloop.counter }} == rhsValue{{ forloop.counter }} {% andSymbol %}{% endfor %}{% endif %}:
    return true{% endfor %}
  default: return false
  }
  {% else %}
  return  {% for field in type.fields %}  lhs.{{ field.name }} == rhs.{{ field.name }} {% andSymbol %}
  {% endfor %}{% endif %}
}
{% endfor %}
